generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tabela de Tipo de Usu치rio
// ==========================
model Role {
  id   Int    @id @default(autoincrement())
  name String

  user User[]

  @@map("roles")
}

// Tabela de Usu치rio
// ==================
model User {
  id           String    @id @default(uuid())
  name         String
  email        String
  password     String
  photo        String?
  phone_number String?
  crm          Int?
  role_id      Int
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())

  role         Role           @relation(fields: [role_id], references: [id])
  patients     Patient[]      @relation(name: "UserPatients")
  caregiver    Patient[]      @relation(name: "CaregiverPatients")
  Prescription Prescription[]
  Record       Record[]

  @@map("users")
}

// Tabela de Pacientes
// ====================
model Patient {
  id            String         @id @default(uuid())
  name          String
  photo         String?
  birth         String
  user_id       String
  caregiver_id  String?
  user          User?          @relation(name: "UserPatients", fields: [user_id], references: [id])
  caregiver     User?          @relation(name: "CaregiverPatients", fields: [caregiver_id], references: [id])
  events        Event[]
  dailies       Daily[]
  prescriptions Prescription[]
  records       Record[]

  @@index([user_id])
  @@map("patients")
}

// Tabela de Receitas
// ===================
model Prescription {
  id         String @id @default(uuid())
  recipe     String @db.Text
  patient_id String
  doctor_id  String

  patient Patient @relation(fields: [patient_id], references: [id])
  doctor  User    @relation(fields: [doctor_id], references: [id])

  @@map("prescriptions")
}

// Tabela de Prontu치rios
model Record {
  id           String @id @default(uuid())
  title        String
  description  String @db.Text
  patient_id   String
  doctor_id    String

  patient Patient @relation(fields: [patient_id], references: [id])
  doctor  User    @relation(fields: [doctor_id], references: [id])

  @@map("records")
}

// Tabela de Rotina Di치ria
// ========================
model Daily {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  hour        DateTime
  date        String
  done        Boolean
  patient_id  String
  patient     Patient  @relation(fields: [patient_id], references: [id])

  @@map("dailys")
}

// Tabela de Eventos
// ==================
model Event {
  id           String   @id @default(uuid())
  description  String   @db.Text
  date         String
  hour         DateTime
  color        String
  patient_id   String
  notification String?
  patient      Patient  @relation(fields: [patient_id], references: [id])

  @@map("events")
}
